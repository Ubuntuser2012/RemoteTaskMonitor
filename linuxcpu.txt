man sched_setscheduler


os75115@isgu_os75115:~$ more /proc/6772/task/6772/stat
6772 (gnome-system-mo) S 1 1834 1834 0 -1 4202496 298679 1215 124 0 11046 10694 2 1 20 0 
2 0 8581574 54919168 5119 4294967295 134512640 134739380 3213918032 3213917216 7746594 0 
0 4096 65536 3223426422 0 0 17 0 0 0 0 0 0

       /proc/[pid]/stat
              Status information about the process.  This is used  by  ps(1).   It  is
              defined in /usr/src/linux/fs/proc/array.c.

              The fields, in order, with their proper scanf(3) format specifiers, are:

              pid %d      The process ID.

              comm %s     The  filename  of  the  executable, in parentheses.  This is
                          visible whether or not the executable is swapped out.

              state %c    One character from the string "RSDZTW" where R is running, S
                          is  sleeping in an interruptible wait, D is waiting in unin-
                          terruptible disk sleep, Z is zombie, T is traced or  stopped
                          (on a signal), and W is paging.

              ppid %d     The PID of the parent.

              pgrp %d     The process group ID of the process.

              session %d  The session ID of the process.

              tty_nr %d   The  controlling terminal of the process.  (The minor device
                          number is contained in the combination of bits 31 to 20  and
                          7 to 0; the major device number is in bits 15 t0 8.)

              tpgid %d    The  ID  of  the foreground process group of the controlling
                          terminal of the process.

              flags %u (%lu before Linux 2.6.22)
                          The kernel flags word of the process.  For bit meanings, see
                          the  PF_* defines in <linux/sched.h>.  Details depend on the
                          kernel version.

              minflt %lu  The number of minor faults the process has made  which  have
                          not required loading a memory page from disk.

              cminflt %lu The  number  of  minor  faults that the process's waited-for
                          children have made.

              majflt %lu  The number of major faults the process has made  which  have
                          required loading a memory page from disk.

              cmajflt %lu The  number  of  major  faults that the process's waited-for
                          children have made.

              utime %lu   Amount of time that this process has been scheduled in  user
                          mode,     measured     in    clock    ticks    (divide    by
                          sysconf(_SC_CLK_TCK).  This includes guest time,  guest_time
                          (time  spent  running  a  virtual  CPU,  see below), so that
                          applications that are not aware of the guest time  field  do
                          not lose that time from their calculations.

              stime %lu   Amount  of time that this process has been scheduled in ker-
                          nel   mode,   measured   in   clock   ticks    (divide    by
                          sysconf(_SC_CLK_TCK).

              cutime %ld  Amount  of time that this process's waited-for children have
                          been scheduled in user mode, measured in clock ticks (divide
                          by   sysconf(_SC_CLK_TCK).    (See   also  times(2).)   This
                          includes guest time, cguest_time (time spent running a  vir-
                          tual CPU, see below).

              cstime %ld  Amount  of time that this process's waited-for children have
                          been scheduled in  kernel  mode,  measured  in  clock  ticks
                          (divide by sysconf(_SC_CLK_TCK).

              priority %ld
                          (Explanation  for  Linux  2.6) For processes running a real-
                          time scheduling policy (policy  below;  see  sched_setsched-
                          uler(2)),  this  is  the  negated scheduling priority, minus
                          one; that is, a number in the range -2 to -100,  correspond-
                          ing  to real-time priorities 1 to 99.  For processes running
                          under a non-real-time scheduling policy,  this  is  the  raw
                          nice  value  (setpriority(2))  as represented in the kernel.
                          The kernel stores nice values as  numbers  in  the  range  0
                          (high)  to  39 (low), corresponding to the user-visible nice
                          range of -20 to 19.

                          Before Linux 2.6, this was  a  scaled  value  based  on  the
                          scheduler weighting given to this process.

              nice %ld    The nice value (see setpriority(2)), a value in the range 19
                          (low priority) to -20 (high priority).

              num_threads %ld
                          Number of threads in this process (since Linux 2.6).  Before
                          kernel  2.6, this field was hard coded to 0 as a placeholder
                          for an earlier removed field.

              itrealvalue %ld
                          The time in jiffies before the next SIGALRM is sent  to  the
                          process due to an interval timer.  Since kernel 2.6.17, this
                          field is no longer maintained, and is hard coded as 0.

              starttime %llu (was %lu before Linux 2.6)
                          The time in jiffies the process started after system boot.

              vsize %lu   Virtual memory size in bytes.

              rss %ld     Resident Set Size: number of pages the process has  in  real
                          memory.   This  is  just the pages which count towards text,
                          data, or stack space.  This does  not  include  pages  which
                          have not been demand-loaded in, or which are swapped out.

              rsslim %lu  Current  soft  limit in bytes on the rss of the process; see
                          the description of RLIMIT_RSS in getpriority(2).

              startcode %lu
                          The address above which program text can run.

              endcode %lu The address below which program text can run.

              startstack %lu
                          The address of the start (i.e., bottom) of the stack.

              kstkesp %lu The current value of ESP (stack pointer), as  found  in  the
                          kernel stack page for the process.

              kstkeip %lu The current EIP (instruction pointer).

              signal %lu  The  bitmap  of pending signals, displayed as a decimal num-
                          ber.  Obsolete, because it does not provide  information  on
                          real-time signals; use /proc/[pid]/status instead.

              blocked %lu The  bitmap  of blocked signals, displayed as a decimal num-
                          ber.  Obsolete, because it does not provide  information  on
                          real-time signals; use /proc/[pid]/status instead.

              sigignore %lu
                          The  bitmap  of ignored signals, displayed as a decimal num-
                          ber.  Obsolete, because it does not provide  information  on
                          real-time signals; use /proc/[pid]/status instead.

              sigcatch %lu
                          The bitmap of caught signals, displayed as a decimal number.
                          Obsolete, because it does not provide information  on  real-
                          time signals; use /proc/[pid]/status instead.

              wchan %lu   This  is  the "channel" in which the process is waiting.  It
                          is the address of a system call, and can be looked up  in  a
                          namelist if you need a textual name.  (If you have an up-to-
                          date /etc/psdatabase, then try ps -l to see the WCHAN  field
                          in action.)

              nswap %lu   Number of pages swapped (not maintained).

              cnswap %lu  Cumulative nswap for child processes (not maintained).

              exit_signal %d (since Linux 2.1.22)
                          Signal to be sent to parent when we die.

              processor %d (since Linux 2.2.8)
                          CPU number last executed on.

              rt_priority %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Real-time scheduling priority, a number in the range 1 to 99
                          for processes scheduled under a real-time policy, or 0,  for
                          non-real-time processes (see sched_setscheduler(2)).

              policy %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Scheduling policy (see sched_setscheduler(2)).  Decode using
                          the SCHED_* constants in linux/sched.h.

              delayacct_blkio_ticks %llu (since Linux 2.6.18)
                          Aggregated block I/O delays, measured in clock  ticks  (cen-
                          tiseconds).

              guest_time %lu (since Linux 2.6.24)
                          Guest  time of the process (time spent running a virtual CPU
                          for a guest  operating  system),  measured  in  clock  ticks
                          (divide by sysconf(_SC_CLK_TCK).

              cguest_time %ld (since Linux 2.6.24)
                          Guest  time  of  the  process's  children, measured in clock
                          ticks (divide by sysconf(_SC_CLK_TCK).

       /proc/[pid]/statm
              Provides information about memory usage, measured in pages.  The columns
              are:

                  size       total program size
                             (same as VmSize in /proc/[pid]/status)
                  resident   resident set size
                             (same as VmRSS in /proc/[pid]/status)
                  share      shared pages (from shared mappings)
                  text       text (code)
                  lib        library (unused in Linux 2.6)
                  data       data + stack
                  dt         dirty pages (unused in Linux 2.6)

..............................................................

unsigned long GetThreadTime()
{
	char procFilename[256] ;
	char buffer[1024] ;

	pid_t pid = ::getpid() ;
	pid_t tid = ::gettid() ;

	sprintf(procFilename, "/proc/%d/task/%d/stat",pid,tid) ;
	int fd, num_read ;
	fd = open(procFilename, O_RDONLY, 0);
	num_read = read(fd, buffer, 1023);
	close(fd);
	buffer[num_read] = '\0';

	char* ptrUsr = strrchr(buffer, ')') + 1 ;
	for(int i = 3 ; i != 14 ; ++i) ptrUsr = strchr(ptrUsr+1, ' ') ;

	ptrUsr++;
	long jiffies_user = atol(ptrUsr) ;
	long jiffies_sys = atol(strchr(ptrUsr,' ') + 1) ;

	return jiffies_user ;
}

...................................................................
contents of /proc/stat
first line, sum up all numbers to get total cpu jiffies

cpu  16711490 1914241 4496754 98898223 491722 253400 276519 0 0
cpu0 13850144 991356 1361339 44391764 271539 247340 39802 0 0
cpu1 2861345 922885 3135415 54506458 220182 6059 236717 0 0
intr 531452179 2087 26801 0 14 2 0 5 0 1 0 0 0 657732 0 0 6247136 34320282 1988570 64 28949979 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 119137023802
btime 1349963557
processes 426542
procs_running 2
procs_blocked 0
softirq 3541162288 0 3314916968 13163764 21441255 2704010 0 23807 17498494 92174 171321816
